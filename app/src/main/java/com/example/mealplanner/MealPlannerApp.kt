package com.example.mealplanner

import android.app.Application
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import androidx.core.content.ContextCompat
import androidx.work.Configuration
import androidx.work.WorkManager
import com.example.mealplanner.notifications.MealReminderScheduler
import com.example.mealplanner.notifications.NotificationHelper
import dagger.hilt.android.HiltAndroidApp
import javax.inject.Inject

@HiltAndroidApp
class MealPlannerApp : Application() {

    @Inject
    lateinit var notificationHelper: NotificationHelper

    companion object {
        private const val TAG = "MealPlannerApp"
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üöÄ Application MealPlanner d√©marr√©e")

        try {
            // Initialiser WorkManager avec une configuration personnalis√©e si n√©cessaire
            initializeWorkManager()
            Log.d(TAG, "‚úÖ WorkManager initialis√© avec succ√®s")

            // NOUVEAU: Initialiser le syst√®me de notifications
            initializeNotifications()
            Log.d(TAG, "‚úÖ Syst√®me de notifications initialis√©")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de l'initialisation de l'application", e)
        }
    }

    private fun initializeWorkManager() {
        try {
            // WorkManager s'initialise automatiquement avec Hilt
            Log.d(TAG, "üìù Configuration WorkManager termin√©e")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur dans la configuration WorkManager", e)
        }
    }

    // NOUVEAU: M√©thode pour initialiser les notifications
    private fun initializeNotifications() {
        try {
            // V√©rifier les permissions de notification (Android 13+)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                val hasNotificationPermission = ContextCompat.checkSelfPermission(
                    this,
                    android.Manifest.permission.POST_NOTIFICATIONS
                ) == PackageManager.PERMISSION_GRANTED

                if (hasNotificationPermission) {
                    startMealReminderService()
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Permission de notification non accord√©e. Les rappels ne fonctionneront pas.")
                }
            } else {
                // Pour les versions ant√©rieures, d√©marrer directement
                startMealReminderService()
            }

            Log.d(TAG, "üîî Syst√®me de notifications configur√©")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de l'initialisation des notifications", e)
        }
    }

    private fun startMealReminderService() {
        try {
            // Programmer les v√©rifications p√©riodiques des rappels de repas
            MealReminderScheduler.scheduleDailyMealChecks(this)
            Log.d(TAG, "‚è∞ Service de rappels de repas d√©marr√©")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors du d√©marrage du service de rappels", e)
        }
    }
}